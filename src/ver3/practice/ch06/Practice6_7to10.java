package ver3.practice.ch06;

/*
 * 6-7 다음은 컴퓨터 게임의 병사(marine)를 클래스로 정의한 것이다.
 *     이 클래스의 멤버중에 static을 붙여야 하는 것은 어떤 것들이고 그 이유는 무엇인가?(단, 모든 병사의 공격력과 방어력은 같아야 한다.)
 * */

class Marine {
    int x = 0, y = 0; // Marine의 위치좌표(x, y)
    int hp = 60;      // 현재 체력
    static int weapon = 6;   // 공격력
    static int armor = 0;    // 방어력

    static void weaponUp() {
        weapon++;
    }

    static void armorUp() {
        armor++;
    }

    void move(int x, int y) {
        this.x = x;
        this.y = y;
    }
}

class Practice6_7to10 {

    public static void main(String[] args) {

    }

}

/* 정답
 * weapon, armoer, weaponUp(), armorUp()
 * 단서에 답이 나와있다.
 * static변수(클래스 변수)는 공통 속성에 해당한다.
 * 따라서, weapon, armor에 static을 붙여야 한다.
 * 또한, 방어력 업그레이드, 공격력 업그레이드를 하는 메서드가 각각 weaponUp(), armorUp()이있는데
 * 모든 병사의 공격력, 방어력은 동일해야 하기 때문에, cv를 다루는 static메서드가 되어야 한다.
 *
 * */

/*
 * 6-8. 다음 중 생성자에 대한 설명으로 옳지 않은 것은? (모두 고르시오)
 *      1 모든 생성자의 이름은 클래스의 이름과 동일해야 한다(o)
 *      2 생성자는 객체를 생성하기 위한 것이다 (x)  // 객체를 생성하기 위한 것 == 클래스, 생성자는 인스턴스 초기화 메서드이다.
 *      3 클래스에는 생성자가 반드시 하나 이상 있어야 한다 (o) // 생성자를 생성하지 않을 경우 컴파일러가 자동으로 기본생성자를 생성한다.
 *      4 생성자가 없는 클래스는 컴파일러가 기본 생성자를 추가한다(o)
 *      5 생성자는 오버로딩 될 수 없다.(x)  // 생성자는 오버로딩 될 수 있다.
*/

/*
 * 6-9. 다음 중 this에 대한 설명으로 맞지 않은 것은? (모두 고르시오)
 *      1 객체 자신을 가리키는 참조변수이다(o)
 *      2 클래스 내부에서라면 어디서든 사용할 수 있다.(x) // 인스턴스메서드, 생성자, 초기화 블럭 내부에서만 사용 가능하다. 클래스 멤버 불가능
 *      3 지역변수와 인스턴스변수를 구별할 때 사용한다(o)
 *      4 클래스메서드 내에서는 사용할 수 없다(o)
 */

/*
 * 6-10. 오버로딩이 성립하기 위한 조건이 아닌 것은?(모두 고르시오)
 *      1 메서드 이름이 같아야 한다.
 *      2 매개변수의 개수나 타입이 달라야 한다.
 *      3 리턴타입이 달라야 한다(x)  // 리턴타입은 오버로딩에 영향을 주지 않는다.
 *      4 매개변수의 이름이 달라야 한다(x)
 */